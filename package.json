{
  "name": "fastapi-react-monorepo",
  "private": true,
  "type": "module",
  "scripts": {
    "env:clean": "node -e \"const fs = require('fs'); const { execSync } = require('child_process'); function forceDelete(dir) { try { if (process.platform === 'win32') { try { execSync('taskkill /F /IM python.exe 2>nul', { stdio: 'ignore' }); } catch {} } if (fs.existsSync(dir)) { fs.rmSync(dir, { recursive: true, force: true }); console.log('Cleaned .venv directory'); } else { console.log('No .venv directory to clean'); } } catch (err) { console.warn('Warning: Could not fully clean .venv directory:', err.message); console.log('This is usually not a problem - continuing...'); } } forceDelete('.venv');\"",
    "env:create": "uv python install 3.12 && uv venv --python 3.12 .venv",
    "env:sync": "cross-env VIRTUAL_ENV= uv pip install --python .venv/Scripts/python.exe --upgrade pip setuptools wheel && cross-env VIRTUAL_ENV= uv pip install --python .venv/Scripts/python.exe -e api",
    "env:sync:unix": "cross-env VIRTUAL_ENV= uv pip install --python .venv/bin/python --upgrade pip setuptools wheel && cross-env VIRTUAL_ENV= uv pip install --python .venv/bin/python -e api",
    "env:full": "npm run env:clean && npm run env:create && npm run env:sync && npm --prefix web ci && uv lock --upgrade",
    "env:full:unix": "npm run env:clean && npm run env:create && npm run env:sync:unix && npm --prefix web ci",
    "install:all": "npm run env:full",
    "install:all:unix": "npm run env:full:unix",
    "seed": "cross-env uv run --python .venv/Scripts/python.exe api/scripts/seed_user.py",
    "seed:unix": "cross-env uv run --python .venv/bin/python api/scripts/seed_user.py",

    "frontend:env:dev": "cross-env APP_ENV=dev node scripts/config-to-env.mjs dev",
    "frontend:env:staging": "cross-env APP_ENV=staging node scripts/config-to-env.mjs staging",
    "frontend:env:prod": "cross-env APP_ENV=prod node scripts/config-to-env.mjs prod",

    "dev:dev": "npm run frontend:env:dev && concurrently -n \"API,WEB\" -c \"cyan,magenta\" \"npm run backend:reload\" \"npm --prefix web run dev\"",
    "dev:staging": "npm run frontend:env:staging && concurrently -n \"API,WEB\" -c \"cyan,magenta\" \"npm run backend:staging\" \"npm --prefix web run dev\"",
    "dev:prod": "npm run frontend:env:prod && concurrently -n \"API,WEB\" -c \"cyan,magenta\" \"npm run backend:prod\" \"npm --prefix web run dev\"",

    "dev": "node scripts/config-to-env.mjs && concurrently -n \"API,WEB\" -c \"cyan,magenta\" \"npm run backend:reload\" \"npm --prefix web run dev\"",
    "dev:unix": "node scripts/config-to-env.mjs && concurrently -n \"API,WEB\" -c \"cyan,magenta\" \"npm run backend:reload:unix\" \"npm --prefix web run dev\"",
    "env:switch": "node api/scripts/env-switch.mjs",
    "backend:reload": "cross-env APP_ENV=dev VIRTUAL_ENV= uv run --python .venv/Scripts/python.exe uvicorn app.main:app --reload --app-dir api --env-file api/env.dev",
    "backend:reload:unix": "cross-env APP_ENV=dev VIRTUAL_ENV= uv run --python .venv/bin/python uvicorn app.main:app --reload --app-dir api --env-file api/env.dev",
    "backend": "cross-env VIRTUAL_ENV= uv run --python .venv/Scripts/python.exe uvicorn app.main:app --host 0.0.0.0 --port 8000 --app-dir api --env-file api/.env",
    "backend:unix": "cross-env VIRTUAL_ENV= uv run --python .venv/bin/python uvicorn app.main:app --host 0.0.0.0 --port 8000 --app-dir api --env-file api/.env",
    "backend:dev": "npm run env:switch env.dev      && cross-env APP_ENV=dev     npm run backend",
    "backend:staging": "npm run config:sync && npm run ml:promote:staging iris_random_forest && npm run env:switch env.staging  && cross-env APP_ENV=staging npm run backend",
    "backend:prod": "npm run config:sync && npm run ml:promote:prod iris_random_forest     && npm run env:switch env.prod     && cross-env APP_ENV=prod    npm run backend",
    "frontend": "npm --prefix web run dev",
    "ensure:models": "cross-env uv run --python .venv/Scripts/python.exe api/scripts/ensure_models.py",
    "ensure:models:unix": "cross-env uv run --python .venv/bin/python api/scripts/ensure_models.py",
    "build:web": "npm --prefix web run build",
    "debug": "node -e \"setTimeout(() => process.exit(0), 3000)\" && curl -s http://127.0.0.1:8000/api/v1/health && echo. && curl -s -X POST -d \"username=alice&password=secret\" -H \"Content-Type: application/x-www-form-urlencoded\" http://127.0.0.1:8000/api/v1/token",
    "validate:setup": "node -e \"console.log('Validating setup...'); const fs = require('fs'); const path = require('path'); const checks = [{name: '.venv exists', check: () => fs.existsSync('.venv')}, {name: 'api/pyproject.toml exists', check: () => fs.existsSync('api/pyproject.toml')}, {name: 'web/package.json exists', check: () => fs.existsSync('web/package.json')}, {name: 'web/node_modules exists', check: () => fs.existsSync('web/node_modules')}]; checks.forEach(({name, check}) => console.log(name + ':', check() ? '✓' : '✗')); console.log('Setup validation complete.');\"",
    "frontend:clean": "node scripts/frontend-clean.js",
    "frontend:install": "npm --prefix web ci",
    "frontend:rebuild": "npm run frontend:clean && npm run frontend:install",
    "frontend:rebuild-lock": "node scripts/frontend-clean.js --zap-lock && npm --prefix web install --package-lock-only && npm --prefix web ci",
    "frontend:diagnose": "node scripts/frontend-diagnose.js",
    "frontend:verify-lock": "node scripts/verify-frontend-lock.js",
    "test:api": "cross-env uv run --python .venv/Scripts/python.exe pytest api/tests",
    "test:api:unix": "cross-env uv run --python .venv/bin/python pytest api/tests",
    "test:api:endpoints": "cross-env uv run --python .venv/Scripts/python.exe pytest api/tests/test_endpoints.py",
    "test:api:endpoints:unix": "cross-env uv run --python .venv/bin/python pytest api/tests/test_endpoints.py",
    "test:endpoints": "npm run test:api:endpoints",
    "test:endpoints:unix": "npm run test:api:endpoints:unix",
    "test:all": "npm run test:api",
    "test:all:unix": "npm run test:api:unix",
    "test:all:watch": "npm run test:all -- --watch",
    "test:all:watch:unix": "npm run test:all:unix -- --watch",
    "ml:promote:staging": "python api/scripts/promote.py staging",
    "ml:promote:prod": "python api/scripts/promote.py prod",
    "config:sync": "node api/scripts/config-sync.mjs",
    "backend:staging:logreg": "npm run config:sync && npm run ml:promote:staging iris_logreg && npm run env:switch env.staging && cross-env APP_ENV=staging npm run backend",
    "backend:prod:logreg": "npm run config:sync && npm run ml:promote:prod iris_logreg && npm run env:switch env.prod && cross-env APP_ENV=prod npm run backend",
    "railway:auth": "powershell -ExecutionPolicy Bypass -File scripts/railway_login.ps1"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "rimraf": "^5.0.5",
    "semver": "^7.6.0",
    "yaml": "^2.8.0"
  }
}

